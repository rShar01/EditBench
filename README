Steps to run
1. Add your LLM generation scripts
- In `final_script.py` there are examples for two neccessary functions: prompt formatting func and the LLM generation func
- The prompt formatting function takes in the original_code_content, highlighted_section, user_instruction and should returns a string of the prompt using these values
- The LLM generation function takes in the prompt and/or question ID and should return a string of the entire file. 
- Pass the two functions to the generation function `generate_editbench(LLM_gen_func, prompt_func, "/root/hf_editbench")` along with the path to where the sandboxes will be constructed (more info on /root/hf_editbench) in the next step
- Pass the sandbox path + output file name to `test_editbench("/root/hf_editbench", "output.json")`. The same hf_editbench path should be given as the last step and the results will be in output.json for this example

2. Build the docker environment and run the container
- `cd docker-stuff` and run `bash build.sh`
- in `run_container.sh` change the `/mnt/d/working` to the local parent directory of this repo to access this repo within the docker interactive container. E.g. if my current path was `/home/user/some_parent/editbench` then I would replace `/mnt/d/working` with `/home/user/some_parent`.
- Change `/mnt/d/working/EditBench/generation_mnt` to the local path you want to use for your LLM generated code. If this is not set, generations may be lost after the docker container is closed.
- Optional paths to ensure the docker container does not run out of space
    - Change `/mnt/d/.cache` to some local directory to act as a cache
    - Change `/home/rshar/hf_editbench` to a local directory to store the question sandboxes
- run `bash run_container.sh` to run the docker container

3. Create your pip environment in docker
- Go to this repo within the docker container: `cd /project/EditBench/EditBenchHFEval`
- Create the python env: `uv venv .docker-venv`
- Install the packages: `uv pip install -e .`
- Run your script that contains the generation and testing function: `python final_script.py`